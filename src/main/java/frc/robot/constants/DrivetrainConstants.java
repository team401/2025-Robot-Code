package frc.robot.constants;

import static edu.wpi.first.units.Units.*;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.*;
import com.ctre.phoenix6.hardware.*;
import com.ctre.phoenix6.swerve.*;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.*;
import coppercore.parameter_tools.json.JSONExclude;
import coppercore.parameter_tools.json.JSONSync;
import coppercore.parameter_tools.json.JSONSyncConfigBuilder;
import coppercore.parameter_tools.path_provider.EnvironmentHandler;
import edu.wpi.first.math.Matrix;
import edu.wpi.first.math.numbers.N1;
import edu.wpi.first.math.numbers.N3;
import edu.wpi.first.units.measure.*;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class DrivetrainConstants {
  // Both sets of gains need to be tuned to your individual robot.

  public static final JSONSync<DrivetrainConstants> synced =
      new JSONSync<DrivetrainConstants>(
          new DrivetrainConstants(),
          "DrivetrainConstants.json",
          EnvironmentHandler.getEnvironmentHandler().getEnvironmentPathProvider(),
          new JSONSyncConfigBuilder().setPrettyPrinting(true).build());
  // Both sets of gains need to be tuned to your individual robot.

  // The steer motor uses any SwerveModule.SteerRequestType control request with the
  // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput

  public final Double steerKp = 40.0;
  public final Double steerKi = 0.0;
  public final Double steerKd = 0.0;
  public final Double steerKs = 0.18753;
  public final Double steerKv = 2.49773;
  public final Double steerKa = 0.0;
  public final Double steerKg = 0.0;

  // When using closed-loop control, the drive motor uses the control
  // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput

  public final Double driveKp = 30.0;
  public final Double driveKi = 0.0;
  public final Double driveKd = 0.0;
  public final Double driveKs = 0.1915;
  public final Double driveKv = 0.83161;
  public final Double driveKa = 0.0;
  public final Double driveKg = 0.0;

  // lineup PID gains
  public final Double driveAlongTrackkP = 0.5;
  public final Double driveAlongTrackkI = 0.0;
  public final Double driveAlongTrackkD = 0.0;

  public final Double driveAlongTrackAcceleration = 5.0;
  public final Double driveAlongTrackVelocity = 2.0;

  public final Double driveCrossTrackkP = 0.5;
  public final Double driveCrossTrackkI = 0.0;
  public final Double driveCrossTrackkD = 0.0;

  public final Double driveRotationkP = 0.5;
  public final Double driveRotationkI = 0.0;
  public final Double driveRotationkD = 0.0;

  public final Double otfPoseDistanceLimit = 0.1;

  // The closed-loop output type to use for the steer motors;
  // This affects the PID/FF gains for the steer motors
  public final ClosedLoopOutputType kSteerClosedLoopOutput = ClosedLoopOutputType.Voltage;
  // The closed-loop output type to use for the drive motors;
  // This affects the PID/FF gains for the drive motors
  public final ClosedLoopOutputType kDriveClosedLoopOutput = ClosedLoopOutputType.TorqueCurrentFOC;

  // The type of motor used for the drive motor
  public final DriveMotorArrangement kDriveMotorType = DriveMotorArrangement.TalonFX_Integrated;
  // The type of motor used for the drive motor
  public final SteerMotorArrangement kSteerMotorType = SteerMotorArrangement.TalonFX_Integrated;

  // The remote sensor feedback type to use for the steer motors;
  // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
  public final SteerFeedbackType kSteerFeedbackType = SteerFeedbackType.FusedCANcoder;

  // The stator current at which the wheels start to slip;
  // This needs to be tuned to your individual robot
  @JSONExclude public final Current kSlipCurrent = Amps.of(120.0);

  // Initial configs for the drive and steer motors and the azimuth encoder; these cannot be null.
  // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
  public final TalonFXConfiguration driveInitialConfigs = new TalonFXConfiguration();
  public final TalonFXConfiguration steerInitialConfigs =
      new TalonFXConfiguration()
          .withCurrentLimits(
              new CurrentLimitsConfigs()
                  // Swerve azimuth does not require much torque output, so we can set a relatively
                  // low
                  // stator current limit to help avoid brownouts without impacting performance.
                  .withStatorCurrentLimit(Amps.of(60))
                  .withStatorCurrentLimitEnable(true));
  public final CANcoderConfiguration encoderInitialConfigs = new CANcoderConfiguration();
  // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
  public final Pigeon2Configuration pigeonConfigs = null;

  // CAN bus that the devices are located on;
  // All swerve devices must share the same CAN bus
  public final CANBus kCANBus = new CANBus("canivore", "./logs/example.hoot");

  // Theoretical free speed (m/s) at 12 V applied output;
  // This needs to be tuned to your individual robot
  @JSONExclude public final LinearVelocity kSpeedAt12Volts = MetersPerSecond.of(4.73);

  // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
  // This may need to be tuned to your individual robot
  public final Double kCoupleRatio = 3.5714285714285716;

  public final Double kDriveGearRatio = 6.746031746031747;
  public final Double kSteerGearRatio = 21.428571428571427;
  @JSONExclude public final Distance kWheelRadius = Inches.of(2);

  public final Boolean kInvertLeftSide = false;
  public final Boolean kInvertRightSide = true;

  public final Integer kPigeonId = 20;

  // OTF Max speed / accel
  public final Double OTFMaxLinearVelocity = 3.5;
  public final Double OTFMaxLinearAccel = 0.5;
  public final Double OTFMaxAngularVelocity = Math.PI;
  public final Double OTFMaxAngularAccel = Math.PI / 2;

  // These are only used for simulation
  @JSONExclude public final MomentOfInertia kSteerInertia = KilogramSquareMeters.of(0.01);
  @JSONExclude public final MomentOfInertia kDriveInertia = KilogramSquareMeters.of(0.01);
  // Simulated voltage necessary to overcome friction
  @JSONExclude public final Voltage kSteerFrictionVoltage = Volts.of(0.2);
  @JSONExclude public final Voltage kDriveFrictionVoltage = Volts.of(0.2);

  public final SwerveDrivetrainConstants DrivetrainConstants =
      new SwerveDrivetrainConstants()
          .withCANBusName(kCANBus.getName())
          .withPigeon2Id(kPigeonId)
          .withPigeon2Configs(pigeonConfigs);

  // Front Left
  public final Integer kFrontLeftDriveMotorId = 7;
  public final Integer kFrontLeftSteerMotorId = 8;
  public final Integer kFrontLeftEncoderId = 9;
  @JSONExclude public final Angle kFrontLeftEncoderOffset = Rotations.of(0.044677734375);
  public final Boolean kFrontLeftSteerMotorInverted = true;
  public final Boolean kFrontLeftEncoderInverted = false;

  @JSONExclude public final Distance kFrontLeftXPos = Inches.of(13.125);
  @JSONExclude public final Distance kFrontLeftYPos = Inches.of(11.625);

  // Front Right
  public final Integer kFrontRightDriveMotorId = 1;
  public final Integer kFrontRightSteerMotorId = 2;
  public final Integer kFrontRightEncoderId = 12;
  @JSONExclude public final Angle kFrontRightEncoderOffset = Rotations.of(-0.397216796875);
  public final Boolean kFrontRightSteerMotorInverted = true;
  public final Boolean kFrontRightEncoderInverted = false;

  @JSONExclude public final Distance kFrontRightXPos = Inches.of(13.125);
  @JSONExclude public final Distance kFrontRightYPos = Inches.of(-11.625);

  // Back Left
  public final Integer kBackLeftDriveMotorId = 5;
  public final Integer kBackLeftSteerMotorId = 6;
  public final Integer kBackLeftEncoderId = 10;
  @JSONExclude public final Angle kBackLeftEncoderOffset = Rotations.of(-0.404296875);
  public final Boolean kBackLeftSteerMotorInverted = true;
  public final Boolean kBackLeftEncoderInverted = false;

  @JSONExclude public final Distance kBackLeftXPos = Inches.of(-13.125);
  @JSONExclude public final Distance kBackLeftYPos = Inches.of(11.625);

  // Back Right
  public final Integer kBackRightDriveMotorId = 3;
  public final Integer kBackRightSteerMotorId = 4;
  public final Integer kBackRightEncoderId = 11;
  @JSONExclude public final Angle kBackRightEncoderOffset = Rotations.of(0.4794921875);
  public final Boolean kBackRightSteerMotorInverted = true;
  public final Boolean kBackRightEncoderInverted = false;

  @JSONExclude public final Distance kBackRightXPos = Inches.of(-13.125);
  @JSONExclude public final Distance kBackRightYPos = Inches.of(-11.625);

  /**
   * Creates a CommandSwerveDrivetrain instance. This should only be called once in your robot
   * program,.
   */
  // public static CommandSwerveDrivetrain createDrivetrain() {
  //     return new CommandSwerveDrivetrain(
  //         DrivetrainConstants, FrontLeft, FrontRight, BackLeft, BackRight
  //     );
  // }

  /** Swerve Drive class utilizing CTR Electronics' Phoenix 6 API with the selected device types. */
  public static class TunerSwerveDrivetrain extends SwerveDrivetrain<TalonFX, TalonFX, CANcoder> {
    /**
     * Constructs a CTRE SwerveDrivetrain using the specified constants.
     *
     * <p>This constructs the underlying hardware devices, so users should not construct the devices
     * themselves. If they need the devices, they can access them through getters in the classes.
     *
     * @param drivetrainConstants Drivetrain-wide constants for the swerve drive
     * @param modules Constants for each specific module
     */
    public TunerSwerveDrivetrain(
        SwerveDrivetrainConstants drivetrainConstants, SwerveModuleConstants<?, ?, ?>... modules) {
      super(TalonFX::new, TalonFX::new, CANcoder::new, drivetrainConstants, modules);
    }

    /**
     * Constructs a CTRE SwerveDrivetrain using the specified constants.
     *
     * <p>This constructs the underlying hardware devices, so users should not construct the devices
     * themselves. If they need the devices, they can access them through getters in the classes.
     *
     * @param drivetrainConstants Drivetrain-wide constants for the swerve drive
     * @param odometryUpdateFrequency The frequency to run the odometry loop. If unspecified or set
     *     to 0 Hz, this is 250 Hz on CAN FD, and 100 Hz on CAN 2.0.
     * @param modules Constants for each specific module
     */
    public TunerSwerveDrivetrain(
        SwerveDrivetrainConstants drivetrainConstants,
        Double odometryUpdateFrequency,
        SwerveModuleConstants<?, ?, ?>... modules) {
      super(
          TalonFX::new,
          TalonFX::new,
          CANcoder::new,
          drivetrainConstants,
          odometryUpdateFrequency,
          modules);
    }

    /**
     * Constructs a CTRE SwerveDrivetrain using the specified constants.
     *
     * <p>This constructs the underlying hardware devices, so users should not construct the devices
     * themselves. If they need the devices, they can access them through getters in the classes.
     *
     * @param drivetrainConstants Drivetrain-wide constants for the swerve drive
     * @param odometryUpdateFrequency The frequency to run the odometry loop. If unspecified or set
     *     to 0 Hz, this is 250 Hz on CAN FD, and 100 Hz on CAN 2.0.
     * @param odometryStandardDeviation The standard deviation for odometry calculation in the form
     *     [x, y, theta]ᵀ, with units in meters and radians
     * @param visionStandardDeviation The standard deviation for vision calculation in the form [x,
     *     y, theta]ᵀ, with units in meters and radians
     * @param modules Constants for each specific module
     */
    public TunerSwerveDrivetrain(
        SwerveDrivetrainConstants drivetrainConstants,
        Double odometryUpdateFrequency,
        Matrix<N3, N1> odometryStandardDeviation,
        Matrix<N3, N1> visionStandardDeviation,
        SwerveModuleConstants<?, ?, ?>... modules) {
      super(
          TalonFX::new,
          TalonFX::new,
          CANcoder::new,
          drivetrainConstants,
          odometryUpdateFrequency,
          odometryStandardDeviation,
          visionStandardDeviation,
          modules);
    }
  }
}
